namespace = COMECON_system

#Set COMECON leader
COMECON_system.1 = {
	type = country_event
	hidden = yes

	trigger = {
		
		OR = {
		
			#No COMECON leader and there is an eligible one
			AND = { 
			
				NOT = { any_country = { has_modifier = COMECON_leader } }
				
				any_country = { 
					has_modifier = COMECON_member
					is_a_communist_government = yes
					in_default = no
					country_rank >= rank_value:super_power
				}
				
			}
			
			#COMECON leader is wrong
			AND = { 
				has_modifier = COMECON_leader 
				OR = {
					NOT = { is_sufficiently_independent = yes }
					NOT = { is_a_communist_government = yes }
					NOT = { country_rank >= rank_value:super_power }
				}
			}
			
			#Overlapping modifiers
			any_country = { has_modifier = COMECON_leader has_modifier = COMECON_member }
			
		}
		
	}

	immediate = {
		
		#Clear COMECON leader
		every_country = {
			limit = { has_modifier = COMECON_leader }
			remove_modifier = COMECON_leader
			if = { 
				limit = { NOT = { has_modifier = COMECON_member } }
				add_modifier = { name = COMECON_member }
			}
		}
	
		#Set COMECON leader
		if = {
			limit = { 
				NOT = { any_country = { has_modifier = COMECON_leader } }
				any_country = { 
					has_modifier = COMECON_member
					is_a_communist_government = yes
					in_default = no
					country_rank >= rank_value:super_power
				}
			}
			random_country = {
				limit = {
					has_modifier = COMECON_member
					is_a_communist_government = yes
					in_default = no
					country_rank >= rank_value:super_power
				}
				add_modifier = { name = COMECON_leader }
			}
		}
		else_if = {
			limit = {
				has_modifier = COMECON_leader 
				OR = {
					NOT = { is_sufficiently_independent = yes }
					NOT = { is_a_communist_government = yes }
					NOT = { country_rank >= rank_value:super_power }
				}
			}
			random_country = {
				limit = {
					has_modifier = COMECON_member
					is_a_communist_government = yes
					in_default = no
					country_rank >= rank_value:super_power
				}
				add_modifier = { name = COMECON_leader }
			}
		}
		
		#Clean up memberships
		if = { 
			limit = { has_modifier = COMECON_leader has_modifier = COMECON_member }
			remove_modifier = COMECON_member
		}
		
	}

}

#Dissolve COMECON
COMECON_system.2 = {
	type = country_event
	hidden = yes

	trigger = {
		
		OR = { 
		
			#THIS is the sole member of COMECON
			AND = { 
				OR = { has_modifier = COMECON_member has_modifier = COMECON_leader }
				NOT = { any_country = { has_modifier = COMECON_member } }
			}
			
			#No COMECON leader
			AND = { 
				NOT = { has_modifier = COMECON_leader }
				NOT = { any_country = { has_modifier = COMECON_leader } }
			}
			
		}
		
	}

	immediate = {
		
		#Everyone leaves COMECON
		remove_modifier = COMECON_member
		remove_modifier = COMECON_leader
		
		every_country = {
			remove_modifier = COMECON_member
			remove_modifier = COMECON_leader
		}
		
	}

}

#Kick ineligible countries out of COMECON
COMECON_system.3 = {
	type = country_event
	title = COMECON_expulsion.t 					# Title of the event; ADD LOCALISATION
    desc = COMECON_expulsion.d 					# Description of the event; ADD LOCALISATION
    flavor = COMECON_expulsion.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/diplo_icons/COMECON_member.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met

	trigger = {
		
		OR = { 
			has_modifier = COMECON_member
			has_modifier = COMECON_leader
			has_variable = COMECON_application_var
		}
		
		OR = { 
			NOT = { is_sufficiently_independent = yes }
			NOT = { infamy < infamy_threshold:pariah }
			NOT = { is_a_communist_government = yes }
		}
		
	}

	immediate = {
	
		#THIS leaves COMECON
		remove_modifier = COMECON_member
		remove_modifier = COMECON_leader
		
		#Terminate any applications
		remove_variable = COMECON_application_var
		
		#Block reapplication for 5 years
		set_variable = {
			name = left_COMECON_var
			months = 60
		}
		
	}
	
	option = {
        name = COMECON_application_rejection.1				# Unfortunate
		
    }

}

#Option for COMECON leader to accept or reject application for membership
COMECON_system.4 = {
	title = COMECON_application_choice.t 					# Title of the event; ADD LOCALISATION
    desc = COMECON_application_choice.d 					# Description of the event; ADD LOCALISATION
    #flavor = COMECON_application_choice.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_portrait.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met

	trigger = {
		
		has_modifier = COMECON_leader
		
		any_country = {
			has_variable = COMECON_application_var
			
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
	}

	immediate = {
	
		random_country = {
			limit = { has_variable = COMECON_application_var }
			save_scope_as = COMECON_applicant
		}
		
		ROOT = {
			save_scope_as = COMECON_leader
		}
		
	}

	option = {
        name = COMECON_application_choice.option.1			# Accept application from PREV
        highlighted_option = yes
		
		#Accept FROM into COMECON
		scope:COMECON_applicant = {
			#FROM joins COMECON
			add_modifier = { name = COMECON_member }
			remove_variable = COMECON_application_var
		}
		
		#Inform applicant of successful outcome
		scope:COMECON_applicant = { trigger_event = { id = COMECON_system.6 } }
		
		#FROM is happy with THIS
		set_relations = {
			country = scope:COMECON_applicant
			value = 25
		}
		
		ai_chance = { 
			base = 99
		}
		
    }
	
	option = {
        name = COMECON_application_choice.option.2 # Refuse application from PREV
		default_option = yes
		
		#Inform applicant of unsuccessful outcome
		scope:COMECON_applicant = { 
			trigger_event = { id = COMECON_system.5 } 
			remove_variable = COMECON_application_var
		}
		
		#FROM is angry!
		change_relations = {
			country = scope:COMECON_applicant
			value = -25
		}
		
		ai_chance = { 
			base = 1
		}
		
    }

}

#Notification of rejection
COMECON_system.5 = {
	title = COMECON_application_rejection.t 				# Title of the event; ADD LOCALISATION
    desc = COMECON_application_rejection.d 				# Description of the event; ADD LOCALISATION
    #flavor = COMECON_application_rejection.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_portrait.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met

	immediate = {
	
		random_country = {
			limit = { has_modifier = COMECON_leader }
			save_scope_as = COMECON_leader
		}
		
	}

	option = {
        name = COMECON_application_rejection.1				# Unfortunate
		
    }

}

#Notification of acceptance
COMECON_system.6 = {
	title = COMECON_application_acceptance.t 				# Title of the event; ADD LOCALISATION
    desc = COMECON_application_acceptance.d 				# Description of the event; ADD LOCALISATION
    #flavor = COMECON_application_acceptance.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_portrait.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met

	immediate = {
	
		random_country = {
			limit = { has_modifier = COMECON_leader }
			save_scope_as = COMECON_leader
		}
		
	}

	option = {
        name = COMECON_application_acceptance.1				# Fortunate
		
    }

}